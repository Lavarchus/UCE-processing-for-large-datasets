#!/bin/bash
#PBS -c s
#PBS -j oe
#PBS -m ae
#PBS -N job_name
#PBS -l select=1:ncpus=15:mem=150gb
#PBS -l walltime=24:00:00
#PBS -M email_address
#PBS -J 0-99

set -euo pipefail

NCPU=$(qstat -f "$PBS_JOBID" | awk -F= '/Resource_List.ncpus/{gsub(/ /,"",$2); print $2}')
mem=$(qstat -f "$PBS_JOBID" | awk -F= '/Resource_List.mem/{gsub(/ /,"",$2); print $2}')
s=$([ "$NCPU" -eq 1 ] && echo "" || echo "s")
echo "$(date)"
echo "------------------------------------------------------"
echo "This job is allocated "$NCPU" CPU core$s and $mem on "
cat $PBS_NODEFILE | uniq
echo "------------------------------------------------------"
echo "PBS: Submitted to $PBS_QUEUE@$PBS_O_HOST"
echo "PBS: Working directory is $PBS_O_WORKDIR"
echo "PBS: Job identifier is $PBS_JOBID"
echo "PBS: Job name is $PBS_JOBNAME"
echo "------------------------------------------------------"

# Load spades
shopt -s expand_aliases
source /etc/profile.d/modules.sh 
module load spades/3.15.5

# Set paths
cd /path/to/working_directory
READS_BASE=/path/to/cleaned_reads_directory
OUTDIR=/path/to/output_directory
mkdir -p $OUTDIR

# Set log file for logging failures/success
LOG="$OUTDIR/assembly_status.log"

# Set array job
READS_FOLDER=($(ls "$READS_BASE"))
SAMPLE_NAME=${READS_FOLDER[$PBS_ARRAY_INDEX]}

# Skip certain samples - if you tested your script on a few already or just want to not run it on some samples
if [[ "$SAMPLE_NAME" == "SQ-08" || "$SAMPLE_NAME" == "SQ-18" ]]; then
    echo "Skipping $SAMPLE_NAME (already assembled)." | tee -a "$LOG"
    exit 0
fi

# Define forward / reverse reads
r1="$READS_BASE/$SAMPLE_NAME/${SAMPLE_NAME}-READ1.fastq.gz"
r2="$READS_BASE/$SAMPLE_NAME/${SAMPLE_NAME}-READ2.fastq.gz"

# Check if output already exists - useful when rerunning the job
if [[ -d "$OUTDIR/$SAMPLE_NAME" ]]; then
    echo "Output directory $OUTDIR/$SAMPLE_NAME already exists. Skipping." | tee -a "$LOG"
    exit 0
fi

# Run Spades - calculate run time
echo "Running SPAdes for $SAMPLE_NAME"
start_time=$(date +%s)

if spades -1 "$r1" -2 "$r2" \
    --careful \
    --threads "$ncpu" \
    --cov-cutoff 2 \
    --tmp-dir "/tmp/jc452792" \
    -o "$OUTDIR/$SAMPLE_NAME"; then

    end_time=$(date +%s)
    runtime=$((end_time - start_time))
    echo "$SAMPLE_NAME SUCCESSFUL runtime=$((runtime/3600))h $(((runtime%3600)/60))m $((runtime%60))s" | tee -a "$LOG"
else
    echo "$SAMPLE_NAME FAILED at $(date)" | tee -a "$LOG"
    exit 1
fi
